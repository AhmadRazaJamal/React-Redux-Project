{"version":3,"sources":["constants/actionTypes.js","components/SearchStories.js","actions/story.js","components/Story.js","actions/archive.js","selectors/story.js","components/Stories.js","components/App.js","reportWebVitals.js","reducers/story.js","reducers/archive.js","reducers/index.js","api/story.js","sagas/story.js","sagas/index.js","store/index.js","index.js"],"names":["STORY_ARCHIVE","STORIES_FETCH","STORIES_FETCH_ERROR","STORIES_ADD","SearchStories","props","state","query","onChange","bind","onSubmit","event","this","onFetchStories","setState","preventDefault","value","target","type","Button","color","variant","Component","connect","dispatch","doFetchStories","onArchive","id","doArchiveStory","story","columns","title","url","author","num_comments","points","objectID","className","style","width","href","comments","archive","onClick","getReadableStories","archivedIds","storyState","archiveState","stories","filter","indexOf","COLUMNS","label","StoriesHeader","Object","keys","map","key","error","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","applyAddStories","action","applyFetchErrorStories","storyReducer","applyArchiveStory","archiveReducer","rootReducer","combineReducers","fetchStories","fetch","response","json","handleFetchStories","call","result","put","hits","watchAll","all","takeEvery","logger","createLogger","saga","createSagaMiddleware","store","createStore","undefined","applyMiddleware","run","rootSaga","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9e660988.chunk.js","sourcesContent":["\nexport const STORY_ARCHIVE = 'STORY_ARCHIVE';\nexport const STORIES_FETCH = 'STORIES_FETCH';\nexport const STORIES_FETCH_ERROR = 'STORIES_FETCH_ERROR';\nexport const STORIES_ADD = 'STORIES_ADD';","import React, { Component } from 'react';\nimport { Button } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { doFetchStories } from '../actions/story';\n\nclass SearchStories extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            query: '',\n        };\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    onSubmit(event) {\n        const { query } = this.state;\n        if (query) {\n            this.props.onFetchStories(query)\n            this.setState({ query: '' });\n        }\n        event.preventDefault();\n    }\n\n    onChange(event) {\n        const { value } = event.target;\n        this.setState({ query: value });\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit}>\n                <input\n                    type=\"text\"\n                    value={this.state.query}\n                    onChange={this.onChange}\n                />\n                <Button type=\"submit\" color=\"primary\" variant=\"contained\">\n                    Search\n        </Button>\n            </form>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    onFetchStories: query => dispatch(doFetchStories(query)),\n});\n\nexport default connect(null, mapDispatchToProps)(SearchStories);","import {\n    STORIES_ADD,\n    STORIES_FETCH,\n    STORIES_FETCH_ERROR,\n} from '../constants/actionTypes';\n\nconst doAddStories = stories => ({\n    type: STORIES_ADD,\n    stories,\n});\n\nconst doFetchStories = query => ({\n    type: STORIES_FETCH,\n    query,\n});\n\nconst doFetchStoriesError = error => ({\n    type: STORIES_FETCH_ERROR,\n    error,\n})\n\nexport {\n    doAddStories,\n    doFetchStories,\n    doFetchStoriesError,\n};","import React from 'react';\nimport './Story.css';\nimport { connect } from 'react-redux';\nimport { doArchiveStory } from '../actions/archive';\n\nconst mapDispatchToProps = dispatch => ({\n    onArchive: id => dispatch(doArchiveStory(id)),\n});\n\nconst Story = ({ story, columns, onArchive }) => {\n    const {\n        title,\n        url,\n        author,\n        num_comments,\n        points,\n        objectID,\n    } = story;\n\n    return (\n        <div className=\"story\">\n            <span style={{ width: columns.title.width }}>\n                <a href={url}>{title}</a>\n            </span>\n            <span style={{ width: columns.author.width }}>\n                {author}\n            </span>\n            <span style={{ width: columns.comments.width }}>\n                {num_comments}\n            </span>\n            <span style={{ width: columns.points.width }}>\n                {points}\n            </span>\n            <span style={{ width: columns.archive.width }}>\n                <button\n                    type=\"button\"\n                    className=\"button-inline\"\n                    onClick={() => onArchive(objectID)}\n                >\n                    Archive\n                </button>\n            </span>\n        </div>\n    );\n}\nexport default connect(null, mapDispatchToProps)(Story); ","import {STORY_ARCHIVE} from '../constants/actionTypes';\n\nconst doArchiveStory = (id) => {\n    return (\n        {\n            type: STORY_ARCHIVE,\n            id,\n        }\n    );\n};\n\nexport  { doArchiveStory };","function isNotArchived(archivedIds) {\n    return function (story) {\n        return archivedIds.indexOf(story.objectID) === -1;\n    };\n}\n\nconst getReadableStories = ({ storyState, archiveState }) => \n    storyState.stories.filter(isNotArchived(archiveState));\n\nconst getFetchError = ({ storyState }) => \n    storyState.error;\n\nexport {\n    getReadableStories,\n    getFetchError,\n};","import React from 'react';\nimport Story from './Story';\nimport './Stories.css';\nimport { connect } from 'react-redux';\nimport { getReadableStories, getFetchError } from '../selectors/story';\n\nconst COLUMNS = {\n    title: {\n        label: 'Title',\n        width: '40%',\n    },\n    author: {\n        label: 'Author',\n        width: '30%',\n    },\n    comments: {\n        label: 'Comments',\n        width: '10%',\n    },\n    points: {\n        label: 'Points',\n        width: '10%',\n    },\n    archive: {\n        label: 'Buttons',\n        width: '10%',\n    },\n};\n\nconst mapStateToProps = state => ({\n    stories: getReadableStories(state),\n    error: getFetchError(state),\n});\n\nconst Stories = ({ stories, error }) => {\n    return (\n        <div className='stories'>\n            <StoriesHeader columns={COLUMNS} />\n            { error && <p className=\"error\">Something went wrong ...</p> }\n            \n            {(stories || []).map(story =>\n                <Story\n                    key={story.objectID}\n                    story={story}\n                    columns={COLUMNS}\n                />\n            )}\n        </div>\n    );\n}\n\nconst StoriesHeader = ({ columns }) =>\n    <div className=\"stories-header\">\n        {Object.keys(columns).map(key =>\n            <span\n                key={key}\n                style={{ width: columns[key].width }}\n            >\n                {columns[key].label}\n            </span>\n        )}\n    </div>\n\nexport default connect(mapStateToProps)(Stories);","import React from 'react';\nimport './App.css';\nimport SearchStories from './SearchStories';\n\nimport Stories from './Stories';\n\nconst App = () =>\n    <div className=\"app\">\n        <div className=\"interactions\">\n            <SearchStories />\n        </div>\n        <Stories />\n    </div>\n\nexport default App; ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { STORIES_ADD, STORIES_FETCH_ERROR } from '../constants/actionTypes';\n\nconst INITIAL_STATE = {\n    stories: [],\n    error: null,\n};\n\nconst applyAddStories = (state, action) => ({\n    stories: action.stories,\n    error: null,\n})\n\nconst applyFetchErrorStories = (state, action) => ({\n    stories: [],\n    error: action.error,\n});\n\nfunction storyReducer(state = INITIAL_STATE, action) {\n    switch (action.type) {\n        case STORIES_ADD: {\n            return applyAddStories(state, action);\n        }\n        case STORIES_FETCH_ERROR : {\n            return applyFetchErrorStories(state, action);\n        }\n        default: return state;\n    }\n}\n\nexport default storyReducer;","import { STORY_ARCHIVE } from '../constants/actionTypes';\n\nconst INITIAL_STATE = [];\n\nconst applyArchiveStory = (state, action) =>\n    [...state, action.id];\n\nfunction archiveReducer(state = INITIAL_STATE, action) {\n    switch (action.type) {\n        case STORY_ARCHIVE: {\n            return applyArchiveStory(state, action);\n        }\n        default: return state;\n    }\n}\n\nexport default archiveReducer;","import { combineReducers } from 'redux';\nimport storyReducer from './story';\nimport archiveReducer from './archive';\n\nconst rootReducer = combineReducers({\n    storyState: storyReducer,\n    archiveState: archiveReducer,\n});\n\nexport default rootReducer;","const HN_BASE_URL = 'https://hn.algolia.com/api/v1/search?query=';\n\nconst fetchStories = query =>\n    fetch(HN_BASE_URL + query)\n        .then(response => response.json());\n\nexport {\n    fetchStories\n};","import { call, put } from 'redux-saga/effects';\nimport { doAddStories, doFetchStoriesError } from '../actions/story';\nimport { fetchStories } from '../api/story';\n\nfunction* handleFetchStories(action) {\n    const { query } = action;\n    try{\n    const result = yield call(fetchStories, query);\n    yield put(doAddStories(result.hits));\n    }\n    catch (error) {\n        yield put(doFetchStoriesError(error));\n    }\n}\n\nexport {\n    handleFetchStories,\n};","import { takeEvery, all } from 'redux-saga/effects';\nimport { STORIES_FETCH } from '../constants/actionTypes';\nimport { handleFetchStories } from './story';\n\nfunction* watchAll() {\n    yield all([\n        takeEvery(STORIES_FETCH, handleFetchStories),\n    ])\n}\n\nexport default watchAll;","import { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst logger = createLogger();\nconst saga = createSagaMiddleware();\n\nconst store = createStore(\n    rootReducer,\n    undefined,\n    applyMiddleware(saga, logger)\n);\n\nsaga.run(rootSaga);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}